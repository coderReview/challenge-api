swagger: '2.0'
info:
  version: 1.0.0
  title: Challenge V5 API
  description: >
    ## Pagination

    - Requests that return multiple items will be paginated to 20 items by
    default.

    - You can specify further pages with the `page` parameter.

    - You can also set a custom page size up to 100 with the `perPage`
    parameter.

    - Pagination response data is included in http headers.

    - By default, the response header contains links with `next`, `last`,
    `first`, `prev` resource links.


    ## Access levels

    - M2M token is supported, all non-public-accessed endpoint can be accessed
    using M2M token with proper scopes.

    - Only admins and copilots can create/update an entity.

    - Copilots can **only** update entities they have created. (eg. copilot A
    cannot update a challenge created by copilot B)

    - Non-admin users can access challenges with groups only if they belong to
    any of the groups

    - It will be considered as admin user if using valid M2M token(having read
    challenge scope) to list challenges or retrieve challenge by id
host: api.topcoder.com
basePath: /v5
schemes:
  - http
  - https
securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /challenges:
    get:
      tags:
        - Challenges
      description: |
        Retrieve challenges in the system.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: id
          in: query
          description: 'Filter by id, exact match'
          required: false
          type: string
          format: UUID
        - name: confidentialityType
          in: query
          description: Filter by confidentialityType
          type: string
          enum:
            - public
            - private
        - name: directProjectId
          in: query
          description: Filter by directProjectId
          type: integer
        - name: type
          in: query
          description: >-
            Filter by type abbreviation, exact match. If provided, the typeId
            will be ignored
          required: false
          type: string
        - name: types
          in: query
          description: >-
            Filter by multiple type abbreviation, exact match. If types is provided, typeIds will be
            ignored
          required: false
          type: array
          items:
            type: string
        - name: typeIds
          in: query
          description: >-
            Filter by multiple type IDs, exact match.
          required: false
          type: array
          items:
            type: string
        - name: tracks
          in: query
          description: >-
            Filter by multiple track abbreviation, exact match. If types is provided, trackIds will be
            ignored
          required: false
          type: array
          items:
            type: string
        - name: trackIds
          in: query
          description: >-
            Filter by multiple track IDs, exact match.
          required: false
          type: array
          items:
            type: string
        - name: typeId
          in: query
          description: >-
            Filter by type id, exact match. If type is provided, typeId will be
            ignored
          required: false
          type: string
          format: UUID
        - name: track
          in: query
          description: 'Filter by track, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: trackId
          in: query
          description: >-
            Filter by track id, exact match. If track is provided, trackId will
            be ignored
          required: false
          type: string
          format: UUID
        - name: search
          in: query
          description: >-
            Filter by name, description and tags fields,
            case-insensitive, partial matches are allowed.
          required: false
          type: string
        - name: name
          in: query
          description: 'Filter by name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: description
          in: query
          description: >-
            Filter by description, case-insensitive, partial matches are
            allowed.
          required: false
          type: string
        - name: timelineTemplateId
          in: query
          description: 'Filter by timeline template id, exact match'
          required: false
          type: string
          format: UUID
        - name: reviewType
          in: query
          description: >-
            Filter by review type, case-insensitive, partial matches are
            allowed.
          required: false
          type: string
        - name: tag
          in: query
          description: 'Filter by tag name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: tags
          in: query
          description: >-
            Filter by multiple tag names, case-insensitive, partial matches are
            allowed.
          required: false
          type: array
          items:
            type: string
        - name: includeAllTags
          in: query
          description: >-
            Require all provided tags to be present on a challenge for a match
          required: false
          default: true
          type: boolean
        - name: events
          in: query
          description: >-
            Filter by multiple event keys (ie: tco21)
          required: false
          type: array
          items:
            type: number
        - name: includeAllEvents
          in: query
          description: >-
            Require all provided events to be present on a challenge for a match
          required: false
          default: true
          type: boolean
        - name: projectId
          in: query
          description: 'Filter by v5 project id, exact match.'
          required: false
          type: integer
        - name: forumId
          in: query
          description: 'Filter by forum id, exact match.'
          required: false
          type: integer
        - name: legacyId
          in: query
          description: 'Filter by legacy id, exact match.'
          required: false
          type: integer
        - name: status
          in: query
          description: 'Filter by status, case-insensitive, partial matches are allowed.'
          required: false
          type: string
          enum:
            - New
            - Draft
            - Cancelled
            - Active
            - Completed
        - name: currentPhaseId
          in: query
          description: Filter by id of the current phase
          required: false
          type: string
        - name: currentPhaseName
          in: query
          description: Filter by name of the current phase
          required: false
          type: string
        - name: group
          in: query
          description: 'Filter by group name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: startDateStart
          in: query
          description: Filter by start date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: registrationStartDateStart
          in: query
          description: Filter by registration start date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: registrationStartDateEnd
          in: query
          description: Filter by registration start date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: registrationEndDateStart
          in: query
          description: Filter by registration end date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: registrationEndDateEnd
          in: query
          description: Filter by registration end date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: submissionStartDateStart
          in: query
          description: Filter by submission start date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: submissionStartDateEnd
          in: query
          description: Filter by submission start date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: submissionEndDateStart
          in: query
          description: Filter by submission end date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: submissionEndDateEnd
          in: query
          description: Filter by submission end date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: startDateEnd
          in: query
          description: Filter by start date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: endDateStart
          in: query
          description: Filter by end date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: endDateEnd
          in: query
          description: Filter by end date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: createdDateStart
          in: query
          description: Filter by created date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: createdDateEnd
          in: query
          description: Filter by created date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: updatedDateStart
          in: query
          description: Filter by updated date (lower bound of date range)
          required: false
          type: string
          format: date-time
        - name: updatedDateEnd
          in: query
          description: Filter by updated date (upper bound of date range)
          required: false
          type: string
          format: date-time
        - name: createdBy
          in: query
          description: >-
            Filter by 'createdBy' field, case-insensitive, partial matches are
            allowed.
          required: false
          type: string
        - name: updatedBy
          in: query
          description: >-
            Filter by 'updatedBy' field, case-insensitive, partial matches are
            allowed.
          required: false
          type: string
        - name: sortBy
          in: query
          description: Sort the results by the field.
          required: false
          type: string
        - name: sortOrder
          in: query
          description: Order the results by the asc/desc.
          required: false
          type: string
        - name: isLightweight
          in: query
          description: >-
            Turn off description and privateDescription for a smaller response
            payload
          required: false
          type: boolean
          default: false
        - name: isTask
          in: query
          description: >-
            Filter based on the task.isTask property.
            Only available for admins/m2m.
            Will be ignored for regular users or not authenticated users
          required: false
          type: boolean
          default: false
        - name: taskIsAssigned
          in: query
          description: >-
            Filter based on the task.isAssigned property.
            Only available for admins/m2m.
            Will be ignored for regular users or not authenticated users
          required: false
          type: boolean
          default: false
        - name: taskMemberId
          in: query
          description: >-
            Filter based on the task.memberId property.
            Only available for admins/m2m.
            Will be ignored for regular users or not authenticated users
          required: false
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/SearchChallengeRequestBody'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Challenge'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - Challenges
      description: |
        Create a new challenge in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeRequestBody'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeResponseBodyForCreateOrUpdate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden. The requester does not have the correct permission to
            create the challenge
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenges/:challengeId':
    get:
      tags:
        - Challenges
      description: Retrieve the Challenge with provided challenge id.
      produces:
        - application/json
      parameters:
        - name: challengeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Challenge'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - Challenges
      description: Update the challenge with the provided id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeRequestBody'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeResponseBodyForCreateOrUpdate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    patch:
      tags:
        - Challenges
      description: >
        Partially update the challenge with the provided id. Only the fields
        that are provided in the body will be changed.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeRequestBody'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeResponseBodyForCreateOrUpdate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge.
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenge-types:
    get:
      tags:
        - ChallengeTypes
      description: |
        Retrieve challenge types in the system.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: name
          in: query
          description: 'Filter by name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: description
          in: query
          description: Filter by description.  Partial matches are allowed.
          required: false
          type: string
        - name: isActive
          in: query
          description: Filter by isActive flag.
          required: false
          type: boolean
        - name: abbreviation
          in: query
          description: Filter by abbreviation.  Partial matches are allowed.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeType'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - ChallengeTypes
      description: |
        Create a new challenge type in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTypeData'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeType'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            create the challenge type
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge type has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenge-types/:challengeTypeId':
    get:
      tags:
        - ChallengeTypes
      description: Retrieve the Challenge Type with provided challenge type id.
      produces:
        - application/json
      parameters:
        - name: challengeTypeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge type to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ChallengeType'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge type not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - ChallengeTypes
      description: Update the challenge type with the specified id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTypeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challengeType to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTypeData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeType'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge type
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge type not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge type has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    patch:
      tags:
        - ChallengeTypes
      description: >
        Partially update the challenge type with specified id.  Only the fields
        that are provided will be updated.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTypeId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challengeType to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTypeData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeType'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge type
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge type not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge type has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenge-tracks:
    get:
      tags:
        - ChallengeTracks
      description: |
        Retrieve challenge tracks in the system.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: name
          in: query
          description: 'Filter by name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
        - name: description
          in: query
          description: Filter by description.  Partial matches are allowed.
          required: false
          type: string
        - name: isActive
          in: query
          description: Filter by isActive flag.
          required: false
          type: boolean
        - name: abbreviation
          in: query
          description: Filter by abbreviation.  Partial matches are allowed.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeTrack'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - ChallengeTracks
      description: |
        Create a new challenge track in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTrackData'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTrack'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            create the challenge track
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge track has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenge-tracks/:challengeTrackId':
    get:
      tags:
        - ChallengeTracks
      description: Retrieve the Challenge Track with provided challenge track id.
      produces:
        - application/json
      parameters:
        - name: challengeTrackId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge track to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ChallengeTrack'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge track not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - ChallengeTracks
      description: Update the challenge track with the specified id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTrackId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challengeTrack to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTrackData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTrack'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge track
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge track not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge track has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    patch:
      tags:
        - ChallengeTracks
      description: >
        Partially update the challenge track with specified id.  Only the fields
        that are provided will be updated.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTrackId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challengeTrack to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTrackData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTrack'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge track
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge track not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: >
            Conflict. Other challenge track has already used the same name,
            abbreviation or legacyId.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenge-phases:
    get:
      tags:
        - ChallengePhases
      description: |
        Retrieve challenge phases in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: name
          in: query
          description: 'Filter by name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Phase'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the challenge phases
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - ChallengePhases
      description: >
        Create a new challenge phase in the system. Only admins can access this
        endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PhaseData'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/Phase'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            create the challenge phase
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other challenge phase has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenge-phases/:challengePhaseId':
    get:
      tags:
        - ChallengePhases
      description: Retrieve the Challenge phase with provided challenge phase id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengePhaseId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge phase to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Phase'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the challenge phase
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge phase not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - ChallengePhases
      description: >-
        Update the challenge phase with the specified id. Only admins can access
        this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengePhaseId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge phase to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PhaseData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/Phase'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge phase
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge phase not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other challenge Phase has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    patch:
      tags:
        - ChallengePhases
      description: >
        Partially update the challenge phase with the provided id. Only the
        fields that are provided in the body will be changed. Only admins can
        access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengePhaseId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge phase to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PhaseData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/Phase'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the challenge phase
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge phase not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other challenge Phase has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      tags:
        - ChallengePhases
      description: >-
        Delete the Challenge phase with provided challenge phase id. Only admins
        can access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengePhaseId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge phase to be deleted
      responses:
        '200':
          description: Deleted - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/Phase'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            delete the challenge phase
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge phase not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /timeline-templates:
    get:
      tags:
        - TimelineTemplates
      description: |
        Retrieve timeline templates in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: name
          in: query
          description: 'Filter by name, case-insensitive, partial matches are allowed.'
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TimelineTemplate'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the timeline templates
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - TimelineTemplates
      description: >
        Create a new timeline template in the system. Only admins can access
        this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TimelineTemplateData'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/TimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            create the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other timeline template has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/timeline-templates/:timelineTemplateId':
    get:
      tags:
        - TimelineTemplates
      description: Retrieve the timeline template with provided id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: timelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of timeline template to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Timeline template not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - TimelineTemplates
      description: >-
        Update the timeline template with the specified id. Only admins can
        access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: timelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of timeline template to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TimelineTemplateData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/TimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Timeline template not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other timeline template has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    patch:
      tags:
        - TimelineTemplates
      description: >
        Partially update the timeline template with the provided id. Only the
        fields that are provided in the body will be changed. Only admins can
        access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: timelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of timeline template to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TimelineTemplateData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/TimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Timeline template not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other timeline template has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      tags:
        - TimelineTemplates
      description: >-
        Delete the timeline template with provided id. Only admins can access
        this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: timelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of timeline template to be deleted
      responses:
        '200':
          description: Deleted - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/TimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            delete the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Timeline template not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenge-timelines:
    get:
      tags:
        - ChallengeTimelineTemplates
      description: |
        Retrieve challenge timeline templates in the system.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: typeId
          in: query
          description: Filter by challenge type id
          required: false
          type: string
        - name: trackId
          in: query
          description: Filter by challenge track id
          required: false
          type: string
        - name: timelineTemplateId
          in: query
          description: Filter by timeline template id
          required: false
          type: string
        - name: isDefault
          in: query
          description: Filter by is default flag
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeTimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the timeline templates
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - ChallengeTimelineTemplates
      description: >
        Create a new challengetimeline template in the system. Only admins can
        access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplateData'
      responses:
        '201':
          description: Created - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            create the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other timeline template has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenge-timelines/:challengeTimelineTemplateId':
    get:
      tags:
        - ChallengeTimelineTemplates
      description: Retrieve the challenge timeline template with provided id.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTimelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge type timeline template to retrieve
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - ChallengeTimelineTemplates
      description: >-
        Update the challenge timeline template with the specified id. Only
        admins can access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTimelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge type timeline template to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplateData'
      responses:
        '200':
          description: Updated - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            update the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '409':
          description: |
            Conflict. Other timeline template has already used the same name.
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      tags:
        - ChallengeTimelineTemplates
      description: >-
        Delete the challenge timeline template with provided id. Only admins can
        access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - name: challengeTimelineTemplateId
          in: path
          required: true
          type: string
          format: UUID
          description: The id of challenge type timeline template to be deleted
      responses:
        '200':
          description: Deleted - The request was successful and the resource is returned.
          schema:
            $ref: '#/definitions/ChallengeTimelineTemplate'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            delete the timeline template
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenge-auditLogs:
    get:
      tags:
        - AuditLog
      description: |
        Retrieve the auditLog for the specified filter parameters.
        Only admins can access this endpoint.
      security:
        - bearer: []
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: challengeId
          in: query
          description: Filter by challengeId.
          required: false
          type: string
        - name: fieldName
          in: query
          description: Filter by fieldName. partial matches are allowed
          required: false
          type: string
        - name: createdDateStart
          in: query
          description: Filter by created date (lower bound of date range)
          required: false
          type: string
        - name: createdDateEnd
          in: query
          description: Filter by created date (upper bound of date range)
          required: false
          type: string
        - name: createdBy
          in: query
          description: Filter by createdBy field.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuditLogEntry'
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The index of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            access the audit log
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenges/:challengeId/attachments':
    post:
      tags:
        - Attachment
      description: Upload attachment of challenge.
      security:
        - bearer: []
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: attachment
          in: formData
          description: The attachment file
          required: true
          type: file
      responses:
        '200':
          description: uploaded successful
          schema:
            $ref: '#/definitions/Attachment'
        '400':
          description: Bad request.  Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            upload attachment
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/challenges/:challengeId/attachments/:attachmentId':
    get:
      tags:
        - Attachment
      description: Download attachment of challenge.
      produces:
        - application/octet-stream
      parameters:
        - name: challengeId
          in: path
          required: true
          type: string
          format: UUID
          description: The challenge id
        - name: attachmentId
          in: path
          required: true
          type: string
          format: UUID
          description: The attachment id
      responses:
        '200':
          description: 'OK, attachment is downloaded'
        '400':
          description: Bad request. Request parameters were invalid.
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized. Fail to authenticate the requester.
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: >
            Forbidden.  The requester does not have the correct permission to
            download attachment
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Challenge not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/ErrorModel'
  /health:
    get:
      tags:
        - Health
      description: |
        Get health status of the app.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              checksRun:
                type: integer
            required:
              - checksRun
        '503':
          description: Service unavailable
          schema:
            $ref: '#/definitions/ErrorModel'
parameters:
  page:
    name: page
    in: query
    description: The page number.
    required: false
    type: integer
    default: 1
  perPage:
    name: perPage
    in: query
    description: The number of items to list per page.
    required: false
    type: integer
    default: 20
    maximum: 100
definitions:
  Challenge:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The challenge id.
            format: UUID
      - $ref: '#/definitions/ChallengeData'
    required:
      - id
  ChallengeType:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The challenge type id.
            format: UUID
      - $ref: '#/definitions/ChallengeTypeData'
    required:
      - id
  ChallengeTrack:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The challenge track id.
            format: UUID
      - $ref: '#/definitions/ChallengeTrackData'
    required:
      - id
  Phase:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The challenge phase id.
            format: UUID
      - $ref: '#/definitions/PhaseData'
    required:
      - id
  Event:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: number
            description: Event Id
      - $ref: '#/definitions/EventData'
    required:
      - id
  Discussion:
    type: object
    properties:
      id:
        type: string
        format: UUID
      name:
        type: string
      type:
        type: string
        enum:
          - challenge
      provider:
        type: string
      url:
        type: string
        description: Only M2M tokens can modify this
      options:
        type: array
        description: Only M2M tokens can modify this
        items:
          type: object
  TimelineTemplate:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The timeline template id.
            format: UUID
      - $ref: '#/definitions/TimelineTemplateData'
    required:
      - id
  ChallengeTimelineTemplate:
    type: object
    allOf:
      - type: object
        properties:
          id:
            type: string
            description: The challenge type timeline template id.
            format: UUID
      - $ref: '#/definitions/ChallengeTimelineTemplateData'
    required:
      - id
      - typeId
      - timelineTemplateId
  ChallengeData:
    type: object
    properties:
      legacyId:
        type: number
      legacy:
        type: object
        properties:
          track:
            type: string
          reviewType:
            type: string
            description: the review type
          forumId:
            type: integer
            description: the forum id
          directProjectId:
            type: integer
          confidentialityType:
            type: string
            enum:
              - public
              - private
      task:
        type: object
        properties:
          isTask:
            type: boolean
            default: false
          isAssigned:
            type: boolean
            default: false
          memberId:
            type: string
            default: null
            description: the ID of the assigned member
      type:
        type: string
        description: Auto-generated
        example: Challenge
      track:
        type: string
        description: Auto-generated
        example: Development
      typeId:
        type: string
        format: UUID
      trackId:
        type: string
        format: UUID
      name:
        type: string
      description:
        type: string
      privateDescription:
        type: string
        description: returned only if the user is registered on the challenge.
      metadata:
        type: array
        items:
          properties:
            name:
              type: string
              description: The challenge setting type
              example: sample metadata name
            value:
              type: string
              description: The sample metadata value
      timelineTemplateId:
        type: string
        format: UUID
      phases:
        type: array
        items:
          $ref: '#/definitions/Phase'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      prizeSets:
        type: array
        items:
          properties:
            type:
              type: string
            description:
              type: string
            prizes:
              type: array
              items:
                properties:
                  description:
                    type: string
                  type:
                    type: string
                  value:
                    type: number
      discussions:
        type: array
        items:
          $ref: '#/definitions/Discussion'
      tags:
        type: array
        items:
          type: string
      projectId:
        type: integer
        description: the project id
      startDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      status:
        type: string
        description: the status
        enum:
          - New
          - Draft
          - Cancelled
          - Active
          - Completed
      attachments:
        type: array
        items:
          $ref: '#/definitions/Attachment'
      groups:
        type: array
        items:
          type: string
      winners:
        type: array
        items:
          properties:
            userId:
              type: integer
              description: The user id
            handle:
              type: string
              description: the user handle
            placement:
              type: integer
              description: the winner placement
              example: 1
      terms:
        type: array
        items:
          type: string
          description: The terms of use id
      numOfSubmissions:
        type: integer
        description: number of submissions
      numOfRegistrants:
        type: integer
        description: number of registrants
      created:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      createdBy:
        type: string
        example: topcoder user
      updated:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      updatedBy:
        type: string
        example: topcoder user
    required:
      - typeId
      - trackId
      - name
      - description
      - timelineTemplateId
      - phases
      - prizeSets
      - created
      - createdBy
      - reviewType
      - tags
      - status
  Attachment:
    type: object
    properties:
      id:
        type: string
        format: UUID
      fileSize:
        type: integer
      fileName:
        type: string
      challengeId:
        type: string
        format: UUID
    required:
      - id
      - fileSize
      - fileName
      - challengeId
  ChallengeTypeData:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      abbreviation:
        type: string
    required:
      - name
      - isActive
      - abbreviation
  ChallengeTrackData:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      abbreviation:
        type: string
    required:
      - name
      - isActive
      - abbreviation
  PhaseData:
    type: object
    properties:
      phaseId:
        type: string
        format: UUID
      predecessor:
        type: string
        format: UUID
      name:
        type: string
      description:
        type: string
      isOpen:
        type: boolean
      duration:
        type: number
      defaultDuration:
        type: number
      scheduledStartDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      scheduledEndDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      actualStartDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      actualEndDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
  EventData:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      key:
        type: string
  TimelineTemplateData:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      phases:
        type: array
        items:
          properties:
            phaseId:
              type: string
              format: UUID
            predecessor:
              type: string
              format: UUID
            defaultDuration:
              type: number
          required:
            - phaseId
            - defaultDuration
    required:
      - name
      - isActive
      - phases
  ChallengeTimelineTemplateData:
    type: object
    properties:
      typeId:
        type: string
        format: UUID
      trackId:
        type: string
        format: UUID
      timelineTemplateId:
        type: string
        format: UUID
      isDefault:
        type: boolean
        default: false
    required:
      - typeId
      - trackId
      - timelineTemplateId
  AuditLogEntry:
    type: object
    properties:
      id:
        type: string
        format: UUID
      challengeId:
        type: string
      fieldName:
        type: string
      oldValue:
        type: string
      newValue:
        type: string
      created:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      createdBy:
        type: string
        example: topcoder user
      memberId:
        type: string
        description: The member ID
        example: '12345678'
    required:
      - id
      - challengeId
      - fieldName
      - oldValue
      - newValue
      - created
      - createdBy
  ChallengeRequestBody:
    type: object
    properties:
      typeId:
        type: string
        format: UUID
        example: challenge type id
      legacy:
        type: object
        properties:
          track:
            type: string
          reviewType:
            type: string
          confidentialityType:
            type: string
          forumId:
            type: number
        required:
          - track
          - reviewType
      name:
        type: string
      description:
        type: string
      privateDescription:
        type: string
      metadata:
        type: array
        items:
          properties:
            name:
              type: string
              description: The sample metadata type
              format: UUID
              example: sample metadata id
            value:
              type: string
              description: The sample metadata value
          required:
            - name
            - value
      timelineTemplateId:
        type: string
        format: UUID
      events:
        type: array
        items:
          properties:
            id:
              type: number
            name:
              type: string
            key:
              type: string
      phases:
        type: array
        items:
          properties:
            phaseId:
              type: string
              format: UUID
            duration:
              type: number
      discussions:
        type: array
        items:
          $ref: '#/definitions/Discussion'
      prizeSets:
        type: array
        items:
          properties:
            type:
              type: string
            description:
              type: string
            prizes:
              type: array
              items:
                properties:
                  description:
                    type: string
                  type:
                    type: string
                  value:
                    type: number
                required:
                  - type
                  - value
          required:
            - type
            - prizes
      tags:
        type: array
        items:
          type: string
      projectId:
        type: integer
        description: the project id
      legacyId:
        type: number
      startDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      status:
        type: string
        description: the status
        enum:
          - New
          - Draft
          - Cancelled
          - Active
          - Completed
      groups:
        type: array
        items:
          type: string
      terms:
        type: array
        description: The ids of the terms of use to add for the challenge
        items:
          type: string
          format: UUID
    required:
      - name
      - tags
      - projectId
      - status
  SearchChallengeRequestBody:
    type: object
    properties:
      ids:
        description: Array of challenge IDs
        type: array
        items:
          type: string
          format: UUID
        minItems: 1
        uniqueItems: true
      groups:
        description: Filter by group IDs
        type: array
        items:
          type: string
          format: UUID
        minItems: 1
        uniqueItems: true
  ChallengeResponseBodyForCreateOrUpdate:
    type: object
    properties:
      id:
        type: string
        format: UUID
        description: The challenge id.
      typeId:
        type: string
        format: UUID
        example: challenge type id
      track:
        type: string
      name:
        type: string
      description:
        type: string
      privateDescription:
        type: string
      metadata:
        type: array
        items:
          properties:
            name:
              type: string
              description: The sample metadata type
              format: UUID
              example: challenge metadata id
            value:
              type: string
              description: The challenge metadata value
      timelineTemplateId:
        type: string
        description: >-
          Required if the selected typeId/track combination does not have a
          default timeline template ID
        format: UUID
      phases:
        type: array
        items:
          $ref: '#/definitions/Phase'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      prizeSets:
        type: array
        items:
          properties:
            type:
              type: string
            description:
              type: string
            prizes:
              type: array
              items:
                properties:
                  description:
                    type: string
                  type:
                    type: string
                  value:
                    type: number
      reviewType:
        type: string
        description: the review type
      tags:
        type: array
        items:
          type: string
      projectId:
        type: integer
        description: the project id
      forumId:
        type: integer
        description: the forum id
      startDate:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      status:
        type: string
        description: the status
        enum:
          - New
          - Draft
          - Cancelled
          - Active
          - Completed
      attachments:
        type: array
        items:
          $ref: '#/definitions/Attachment'
      groups:
        type: array
        items:
          type: string
      winners:
        type: array
        items:
          properties:
            userId:
              type: integer
              description: The user id
            handle:
              type: string
              description: the user handle
            placement:
              type: integer
              description: the winner placement
              example: 1
      terms:
        type: array
        items:
          type: string
          description: The terms of use id
          format: UUID
      numOfSubmissions:
        type: integer
        description: number of submissions
      numOfRegistrants:
        type: integer
        description: number of registrants
      created:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      createdBy:
        type: string
        example: topcoder user
      updated:
        type: string
        format: date-time
        description: 'ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ)'
      updatedBy:
        type: string
        example: topcoder user
    required:
      - id
      - typeId
      - track
      - name
      - description
      - phases
      - prizeSets
      - created
      - createdBy
      - reviewType
      - tags
      - projectId
      - forumId
      - status
  ErrorModel:
    type: object
    properties:
      message:
        type: string
        description: the error message
