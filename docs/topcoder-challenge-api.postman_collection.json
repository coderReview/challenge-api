{
	"info": {
		"_postman_id": "49108fab-daa7-44ea-a66c-40d085d31e7f",
		"name": "topcoder-challenge-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChallengeTypes",
			"item": [
				{
					"name": "create challenge type",
					"item": [
						{
							"name": "create test data",
							"item": [
								{
									"name": "test data - create type 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3ea152a-7ede-4ede-ab85-df79f134b8d2",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID1\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-1\",\n\t\"description\": \"descritpion1\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb1\",\n\t\"legacyId\": 111\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8da63bca-51f8-47ec-bf79-74a80e2f848b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID2\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-2\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb2\",\n\t\"legacyId\": 222\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18d94132-eb7f-4b37-8160-231e46b26419",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID3\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-3\",\n\t\"description\": \"descritpion3\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb3\",\n\t\"legacyId\": 333\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45b79590-62e1-4167-83db-74650f1597b4",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID4\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-4\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb4\",\n\t\"legacyId\": 444\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "test data - create type 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa598560-b637-4cfb-bbda-b97ae92b87f1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"TEST_TYPE_ID5\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"type-name-5\",\n\t\"description\": \"descritpion5\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb5\",\n\t\"legacyId\": 555\n}"
										},
										"url": {
											"raw": "{{URL}}/Challenge-types",
											"host": [
												"{{URL}}"
											],
											"path": [
												"Challenge-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "create by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e3a22af-ca9b-4060-aae6-b504694f9c37",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb123\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b29a080-248d-4d01-96bd-38405c5d757c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-admin\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb456\",\n\t\"legacyId\": 456\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create without optional properties by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b312ce67-3e74-4dfa-a3ca-829909b3f661",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-without-optional-properties\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"cwoop\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7566a3b0-e388-4903-ab12-c2547873b9ff",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"isActive\": true,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed32a2b7-3449-4bc4-9454-e4ce63045aa6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"abbreviation\": \"cf4\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create missing parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddb02fb1-0b4e-4b8c-b7db-1e03436d1902",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"failure\",\n\t\"name\": \"create-for-400\",\n\t\"isActive\": false,\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa99348c-fc1b-4e8c-af04-bc9a3c090c92",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccf8c3b3-3a9c-453c-88de-3e5bba952dad",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8efed8bd-ef79-459d-9894-ed8ff82dd105",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19c55fb6-984e-44eb-bd8f-e10d382ded7c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-copilot\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e8c2ab5-3cd7-44b7-a39c-c2a556f30b66",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"type-NAME-1\",\n\t\"description\": \"test-value\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abb121212\",\n\t\"legacyId\": 123121212\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffa4d3fe-0bd8-4f45-a79c-4af323b9a75b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TYPE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb565656\",\n\t\"legacyId\": 123565656\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3709467-263c-4a80-943f-472cdbb1e6c4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"create-by-m2m\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge types",
					"item": [
						{
							"name": "search challenge types 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80ff3dea-c4de-411b-a2b8-11fa2aea6512",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?name=-name-&description=cri&isActive=true&abbreviation=abb&legacyId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "name",
											"value": "-name-"
										},
										{
											"key": "description",
											"value": "cri"
										},
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "abbreviation",
											"value": "abb"
										},
										{
											"key": "legacyId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4ab11ec-44fc-4f5d-8f17-6630b4427ea4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=true&page=2&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35c4457e-4aac-436f-a60a-24069bfd3b06",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c94f330d-9863-4e7a-9e70-2fbd15e8d178",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?isActive=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "isActive",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge types invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fd61637-9130-4df5-babd-62d5c8c46438",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types?legacyId=-5678",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "-5678"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type",
					"item": [
						{
							"name": "get challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14210010-d6fc-48bf-a0d7-22389927b714",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15d754d4-3f09-4a49-b45b-f67b0bd1c8b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af47a0fb-6bd4-42d3-9523-7fe4d1df8eb2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c8dc816-db1d-4d8b-8257-738c0333af1e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge type",
					"item": [
						{
							"name": "partial update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32b227b6-2ca3-4d1c-afe6-0d7c612201a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\",\n\t\"legacyId\": 123787811\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92239fbf-3e55-40c5-96bf-57b0ca9446a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"add-description\",\n\t\"isActive\": true,\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "017176d7-5329-4831-acbe-6917055f88ac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac1994d-0f81-405d-b1d8-8f656e00e758",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "289e01ae-f58e-46ec-933c-90f67385ef5f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"description\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d4b13d8-55c9-45b8-a41e-943b33862eac",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"1234\",\n\t\"isActive\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11153f4d-4216-4881-a3a3-2a0d3ecd45cb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": 1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "887e28d3-bbfa-411f-8e3e-cc8869c5fc63",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": -1234\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3625f19-fe22-413d-81a1-f3a5b3742b5b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07ca3722-d757-4648-b527-ae8875b14ee5",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d873aa4-a4f1-4b9c-97cd-cc920e31e586",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c30f1f07-cd0c-421b-8f91-c4a51ca97191",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51d8b02b-1f34-47d0-b42c-433a154892f0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6146e7c2-cee0-43eb-b7e7-8ae55bb6a214",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-1\",\n\t\"description\": \"update-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b885f668-e14f-4ad2-a40b-2035e2839b2a",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"abbreviation\": \"abbxxxyyzz11\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "589b5f5b-d009-4fde-b439-d67b49364fa0",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 222\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "147d0df5-d27b-4b07-9229-9e1be88612f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc79be55-efb2-4f6b-bfec-070f97233080",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"patch-by-m2m\",\n\t\"description\": \"patch-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type",
					"item": [
						{
							"name": "update challenge type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6176d96-ad5f-44f7-a2f2-583b803d4b51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-1789\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb789\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca820d7-dedf-4258-8680-520da57658fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb56756\",\n\t\"legacyId\": 12356756\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf89929f-f235-46d7-8a12-caa0bc615977",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d98b02b-e794-4ac3-b0f3-b9c44509f77d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": 12345,\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50bdb11e-e97f-4cda-9452-94cdfba3ab7b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 123,\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter inactive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c859695-1507-4000-a5f9-2061227c441e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": 123,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter abbreviation 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79f2f0b3-9c7e-40e9-973f-f3c306aef841",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": 123445,\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43653a66-c781-41b7-ac60-28b4aaeb5b92",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"test-name\",\n\t\"description\": \"12345\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"123445\",\n\t\"legacyId\": \"abc\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3502b0dc-adbf-4c0e-ba14-89250f3ba524",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"update-description2\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter isActive  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c62b39bb-6a0c-4806-9973-dde1d2653984",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"abbreviation\": \"123\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type missing parameter abbreviation  400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32eb65ef-afc1-4bda-b0d0-0688e4c00fae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update\",\n\t\"isActive\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b58c9df3-2c5c-4069-a767-95813571ccea",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d1f0964-d184-483a-8fe2-f35c2bd08044",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d1e7b0b-00f1-4a33-bcf0-a28ab53da4f5",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type via user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd1fa692-0a7f-47d7-88ed-318ed9019e7a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19138fb6-eaae-46ff-8ab3-4e494399db9d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-name-2\",\n\t\"description\": \"update-description2\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb\",\n\t\"legacyId\": 123\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed22dbe8-378c-4984-9c61-b61838e66e57",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaaabb34342\",\n\t\"legacyId\": 12322338899\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate legacyId 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "264c9e9c-6cde-45eb-942d-d94bc88c9b80",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abbaxxabb34342\",\n\t\"legacyId\": 789\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type duplicate abbreviation 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23c4f1f7-3096-48d6-b099-5dd624579d1d",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TYPE-name-2-aaaa-bb\",\n\t\"description\": \"description\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb1\"\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TYPEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TYPEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f404906d-c91b-4962-87d5-7ced7d4523b0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_types_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2023452b-24a9-4ab1-b2e5-a423a3b6c32e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-by-m2m-aabbcc\",\n\t\"isActive\": false,\n\t\"abbreviation\": \"abb29293939\",\n\t\"legacyId\": 12329293939\n}"
								},
								"url": {
									"raw": "{{URL}}/Challenge-types/{{TEST_TYPE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"Challenge-types",
										"{{TEST_TYPE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengePhases",
			"item": [
				{
					"name": "create challenge phase",
					"item": [
						{
							"name": "create phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62d4650c-15ed-4c62-84a5-687f49dc713c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "517b90e4-c6f9-458a-86af-da76df750fd0",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-2\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a0b9d92-6f77-4093-b684-14817f755f48",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-3\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19bffa3c-33e0-44fc-a680-91f6adddb5d8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-4\",\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20cea352-6f09-4362-b6ed-2883d3d367a1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"description\": 1111,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f3cae90-d567-4d54-b69a-081c9b1b68b5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 4444,\n\t\"isOpen\": false,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc7a391b-1cd2-4844-8fff-8e801dbac3de",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": 10000,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c26d6602-8af8-4b40-a6dd-07cec2d28411",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.environment.set(\"PHASED_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"4444\",\n\t\"isOpen\": true,\n\t\"duration\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40e3cdab-1134-4473-af9e-909e5bd3f3a6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "818db31e-13eb-47f5-a64f-e9b90cad42dd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase missing parameter duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7827396-7436-42d6-95d7-629e5aa2f165",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-5\",\n\t\"isOpen\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d650353-63d6-4379-923a-ebbd3adf541e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3904c00c-5b4b-4dc1-afb9-a5dbc1cfabf4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9a5bb92-9339-443f-b621-f76765e0036d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase via copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ade1e1c-abba-4344-9b53-7914ec43433e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5472a101-bec8-49cd-8cf7-9fabcfabc394",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"PHASE-1\",\n\t\"description\": \"has-description\",\n\t\"isOpen\": true,\n\t\"duration\": 100000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "064bd5d0-280a-462e-aff1-074d89d48cce",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_PHASE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f777ac5d-832d-4313-b62f-c5a753fadab5",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phase-by-m2m\",\n\t\"description\": \"m2m-description\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge phases",
					"item": [
						{
							"name": "search challenge phases by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c56b3e-12b7-4a92-9d1b-4987b7fc89f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases with page parameter by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3618ca2c-1795-460d-a268-e79d106ee08a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph&page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "098ada47-c8c1-4905-b402-fcfff31aa950",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bed9886e-6757-4c04-8099-ad3e980a6689",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "584ba8d8-c4df-4af3-a869-92eea373b48e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?name=ph",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "ph"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge phases invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "588b3ec6-24df-40a8-996e-04f1d802189d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge phase",
					"item": [
						{
							"name": "get challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35695602-9b2b-484e-af5f-58fb733fa4ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "573e2c91-1b4c-43bb-b7ab-2a6ab6490e7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45babbea-d703-4414-9a63-7f73b3a92f80",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e18922c-3f67-4a5c-a275-d85df36dbf82",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b64e6c2-91e2-42dc-9f32-36681dc880fa",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5215a43-54a0-4f2e-a3d2-e4ddd2111119",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2c0145f-6543-48b2-b44e-44301c9a7354",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de04670d-811d-4e75-92e4-f6faf40aa3cc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c093c79d-a6d7-42fd-b3d6-0fd3c60f5317",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ef307dc-3d72-467f-ab3a-12ccecf4ff09",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge phase",
					"item": [
						{
							"name": "partial update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b429e5b-b780-452b-b526-a79b52178565",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9f5a485-6ed1-45f3-b7c5-30a025425417",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-2\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb239cd2-b43f-4757-a8d7-0e3475302c6b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c924120f-846a-443c-8413-a3790cb514d4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 199,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1b05429-bdc4-4a53-aecc-cdd706dd1ca5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"description\": 5000,\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid isOpen 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e79bc8-7bdb-4842-aae6-5d4ef62f8694",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": 1,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase invalid duration 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "817c8513-37da-43cb-8e7e-8967a1cc9098",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": \"1day\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf67c60f-998c-4544-8230-3ed93c373e9e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1882c5e7-9079-4de0-844d-ff464e6fc1ee",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e46281-4c55-4e5b-a383-9948903960f8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cea4a92-8338-4b78-88e1-8b59624968d9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b148b487-ec03-4b2a-a84e-73b5bf0b5a84",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "868ff0ee-ef2b-4d6e-8578-4a34fb1840b3",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-PHASE-2\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82c0c7c3-aa0e-4751-b99c-0c9f7e59e0b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ab9cc22-d947-4801-98a8-a2519201089a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 50000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge phase",
					"item": [
						{
							"name": "update challenge phase 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f13266da-83fc-4685-8c2a-cc95a896a357",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "979a61d0-eb20-4f61-9168-f2aee7d9b9e4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-PHASE-2\",\n\t\"description\": \"add-description-in-put\",\n\t\"isOpen\": true,\n\t\"duration\": 10000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81d008df-d5da-4d32-b649-832128b97ddf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9c79ede-2565-4bda-9b37-32fbf1ec371e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 12345,\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "894dc7b5-b302-4589-9d6d-131391aee6e8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18d38f2c-25f1-4ad1-acb0-760e6ef5d915",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94a65fe5-8451-4aeb-9428-9af1f5c0dd01",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c53369d-9f74-45cd-9878-0de900ad8df6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-1\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7c169f6-0283-4da5-944c-459588cc1679",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"phAse-3\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb72c9c6-e2bc-4532-bc56-5389d94df499",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fab4d33d-d570-4bc2-849f-b4eb3a028ca4",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-phase-by-m2m\",\n\t\"isOpen\": true,\n\t\"duration\": 20000\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge phase",
					"item": [
						{
							"name": "delete challenge phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d19c8dc1-20a6-4bc5-b547-27815445582f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d77ec0d8-f230-4cec-b216-c71ae450ba39",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdc12d12-08da-49a7-bb19-1460c61b97fe",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6826552-227e-49b1-8bfb-06ff404e8764",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19a5e3ee-e840-413f-b7ca-40ccb7821736",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a6b30d9-0a87-4353-87ce-f0a6aafd67f7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{PHASEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{PHASEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70cce9f3-6288-4225-9518-eb6589064d0f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge phase using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36884fb0-1a62-4cb5-b95d-21090307146f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_phases_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge phase using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01ac7c9c-92cb-4ef6-a65a-52cfc4be1899",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{TEST_PHASE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{TEST_PHASE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TimelineTemplates",
			"item": [
				{
					"name": "create timeline template",
					"item": [
						{
							"name": "create timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "280d4878-efc9-4b15-be97-0085a70c2f4b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create inactive timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c3c904a-198c-4030-9c74-a292373fa514",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEB_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template for delete testing later",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d18744a3-4114-4c9a-8b88-6758d1e9f2a5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEMPLATEC_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"description\": \"desc-3\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template contain invalid phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348a6a3b-d6be-4a3e-b9a9-1ba27737e990",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f16ba23f-55fc-490a-9de4-b9f091118c4f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234,\n    \"description\": \"desc-4\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb00f59-cade-44db-bafa-e44ddfba72c2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"description\": 1234,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb7e88c-616c-4556-a81e-96afc96fc716",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": \"active\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7354bb2e-0211-484b-987a-e370935840e1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bda81f5-365e-46de-8ef9-9c06ca9527c0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"phases\": [\n      {\n        \"id\": \"{{PHASED_ID}}\",\n        \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a6f3094-535c-46fe-b9d9-49fb45030356",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-4\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ff5765-45bf-4079-8aa5-200b007a493f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0368030c-27e1-47fd-99ea-a493db40e4de",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7858529-caba-4587-8c10-738c0201271f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e242c8e-f113-4aff-b48a-c16a88c703a8",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64e39ede-c6a7-4f6c-9816-4deb2cf6eb9e",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"tempLATE-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7162291f-55af-446f-84bd-f3369b58a7db",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_TEMPLATE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9adf2a5f-ae43-4b9d-b82b-c3f082ada173",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-by-m2m\",\n    \"description\": \"desc-by-m2m\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search timeline templates",
					"item": [
						{
							"name": "search timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "642c95fd-2be8-4333-9631-e49df704570e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template with page by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b527cd4-d4df-45ba-ad2c-d42633fc1226",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?page=1&perPage=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c88df2b-afb8-49da-aac7-d902e5fb309b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?name=LA",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "LA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search timeline template invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae766749-2ba9-4b6f-9ea4-013be325bd0c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates?invalid=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get timeline template",
					"item": [
						{
							"name": "get timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "990c7f75-2b54-42cd-b409-2227783f91d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23e2536f-4ad4-43d0-bb15-a16f52c2da3b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eb7ba23-f221-4254-bfff-8a16a8d834fa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5642a7e-0629-4a02-a0f7-853a4f615970",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cb48ac4-c721-4945-be7c-cac8df000b83",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47bca824-1957-446e-8670-6e1c2c6ef6e8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97b14052-1f22-431b-a8f1-6cdb4987de32",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43b4f9a8-f472-4344-a52b-598364c02f46",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f426ff6f-3ce9-40ac-9a11-4fd7dee45fa1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61e2aad1-5c83-479e-89ff-ac329f6a8fe7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update timeline template",
					"item": [
						{
							"name": "partial update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02aac36f-4194-4413-8467-4e55e4f4c80d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46d3fa3f-2491-4c8e-ba3e-7dc2367c90a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template phases can't be empty 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29ff8aa4-b6e1-4595-ade0-10dcd526b2eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\",\n    \"phases\": []\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e976e0b7-95d0-4167-b1b0-f73f79c9be07",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1234\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d39a8ca-a97b-4be2-8ef1-ea03f658d025",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7af137c-a04f-4203-a948-a9910535fc02",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"isActive\": 111111\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96f916a5-9bc9-40a3-8019-fef6509407ba",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f912c15-3778-425a-8adc-9e824a0ec44b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ea0681c-73ef-4446-b39b-102f3654aa7d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af4fab0c-991d-45fd-bac4-7b5c1dd80639",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8b3a431-3831-4caf-b387-cffb2555754b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template  duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0ceb3ba-49f4-4bf1-a47a-f3bbcbb036a3",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec81c5d9-e3fa-4249-a245-4643c9a8ef54",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-m2m\",\n    \"description\": \"new-desc-m2m\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9f8db5a-1436-4249-8623-02b871772e12",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"new-template-1\",\n    \"description\": \"new-desc-1\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update timeline template",
					"item": [
						{
							"name": "update timeline template 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66acb74c-b291-4fd0-993e-b6ef21d577eb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e6dae3a-e2c6-481f-8173-dd41e9a515cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-2\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEB_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEB_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template incorrect phase 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbf04584-940e-44f5-878e-f8f292261c76",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-3\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"id\": \"{{SETTINGA_ID}}\",\n        \"name\": \"new-PHASE-2\",\n        \"description\": \"add-description-in-put\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n    \t\"isActive\": true,\n\t    \"duration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b311321-029b-4f87-b8e0-8dbcbce3720b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498acd80-1258-4ffb-bbfd-eadd293630aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 1221,\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid description 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c012247-e7c1-4f04-be58-831694eee4eb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": 11121,\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39c6b9d2-cc21-4002-9bee-1c5481b5076a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": 123,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e9d419a-f11e-4e66-a836-9978e7384469",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing isActive 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d89a012b-518f-4d4d-b746-34660b034bb6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template missing phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f3ebee5-ea2b-4c18-b7b0-4a16f2d1063b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00e38234-55f5-48af-a671-1585f470bb60",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cb8626a-d465-4c76-9b0a-1bf0cf3a7e21",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f02096f-9e2b-4911-ad72-d39a66e7f6d3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79edbecb-2739-405c-8536-549e94800a44",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b9e5ebb-7368-41ec-8af0-44a90fa173ae",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"template-1\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template duplicate name 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7416ba9e-2241-4b1c-9a92-af84e22e21f9",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TEMPlate-2\",\n    \"description\": \"desc-1\",\n    \"isActive\": true,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d640e795-3a74-4811-88eb-61eb4a814118",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      },\n      {\n        \"phaseId\": \"{{PHASEB_ID}}\",\n\t    \"predecessor\": \"{{PHASEA_ID}}\",\n\t    \"defaultDuration\": 10000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c2dacb7-ab74-4851-8b05-d9eaa9b8d7b3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-template-by-m2m\",\n    \"description\": \"update-desc-by-m2m\",\n    \"isActive\": false,\n    \"phases\": [\n      {\n        \"phaseId\": \"{{PHASEA_ID}}\",\n        \"defaultDuration\": 20000\n      }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete timeline template",
					"item": [
						{
							"name": "delete timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b522f8bd-1d99-49a4-8186-f88974fddaf3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc5dfac2-53fc-4a55-859e-2a504bcc6444",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c63ff0e4-0eb7-4496-a262-bda55a9f1a20",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5c4f20e-3a21-4fda-a1de-ea03f67186bb",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d3ca212-722c-42f3-bed5-e58f7b934555",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template by copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aadeb59c-adb4-40a5-aead-c3ab95dcca54",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEMPLATEC_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEMPLATEC_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "946c10d0-8581-4452-9691-f00e76579836",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timeline template using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97879dfb-7d7e-468c-9c18-5680dcf39866",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_timeline_templates_delete}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete timeline template using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f83e9ae-7bcc-41cc-b148-7d081fa60660",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TEST_TEMPLATE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TEST_TEMPLATE_M2M_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ChallengeTimelineTemplates",
			"item": [
				{
					"name": "create challenge type timeline template",
					"item": [
						{
							"name": "create challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f86a1930-8edf-4ba0-ad15-9a7a56de8eb5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TYPE_TEMPLATEA_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8052f2ab-6a9b-4f00-a31d-8316e6c3e687",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a828ef57-0882-4acb-b8b7-b243f1df372d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d298b735-08a8-4507-a355-bfe02e8e1aa6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5434abda-30a3-4071-809b-fb87c913816e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"invalid\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "990e1861-2db0-47c7-89c1-4119c87e5dec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"invalid\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with timelineTemplateId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a105f74-7518-432b-9970-4bd4ac8a4011",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 404 with typeId does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3390eae-c23b-4d75-aa96-317408a6c689",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99c30af0-5901-4739-991f-61b8b8992211",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5720151-0281-4294-a6c7-932d74fb75ba",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36d8fb6f-171d-4d8d-80ee-27e322d2c56b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template - 403 by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f6c1906-8443-4c79-a9bc-da11aff3edf2",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge type timeline template using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73f57489-68da-4f30-8e09-d84018005d0b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_full}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge type timeline template using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4393586-9d7f-460b-9f45-8a7166712b47",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "84025b56-e7b6-4480-8d6d-ff79bae60351",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54141bb1-2442-43a1-ad53-e5c9c026d8c9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge type timeline templates",
					"item": [
						{
							"name": "search challenge type timeline templates by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a53a589e-05e0-4e4d-8ee4-d04873ffe7f7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge type timeline templates by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "422a9821-85ab-442a-8155-c8f9126096bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{TYPEA_ID}}&timelineTemplateId={{TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2748c8f2-6a00-435d-81bf-4d76c59794bd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?other={{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "other",
											"value": "{{TYPEA_ID}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TEMPLATEA_ID}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "884860e6-d855-456b-a332-3206a6b81591",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId=123",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge type timeline templates - 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0afd7d8f-c399-4b21-b10d-7015430eb23c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines?timelineTemplateId=12321",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "12321"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "803cf53c-8ce5-48ac-8e83-b9cba968d44c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03f22bbb-0fb3-4c20-abc2-82d200a54a08",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge type timeline template",
					"item": [
						{
							"name": "get challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4894601-5d2c-424e-b330-16a8f9f6f134",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a74e08-7707-4ecc-8ab6-eff5e40cca46",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c659c54-b52b-4a59-9d42-8df5eab04a3b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 403 using forbidden m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f073423e-9f2c-416f-8fdf-f6d461a32fbc",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fda75f9-ca77-4bcc-9773-350ce4707941",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16b6269f-1674-4575-a907-d2dffbc273a3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 401 without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c62d8c6-d5d9-421c-8df7-00c2d502175c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0b84365-b54e-4809-8b86-5ec8291f4779",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{PHASEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{PHASEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c254b08-4804-42a3-8261-faa0749f82c8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6d45f17-1794-4faf-95db-c405c96adef4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e58644a9-c89a-47f9-9687-42668dfd8003",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge type timeline template",
					"item": [
						{
							"name": "update challenge type timeline template by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85b5f47a-ccf0-4195-ada6-c32b3ef6d03e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d193cd9-7f79-4608-8b28-fbfe9d709af6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03091b78-abea-4318-bcf3-dd0c63d068b8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b145d59-86db-40ec-9e92-6151a7a57c6d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a7d2536-942c-4a4e-8d54-c9339a666ccf",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge type timeline template by m2m Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90ca29cc-4e4f-473e-a70f-142457e38382",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b702f8b4-8db2-44a1-8731-8fbee89f1144",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n    \"other\": 123\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "476ae917-7979-4771-82a5-9b39127495bb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 missing typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92342a0f-4426-4b33-8217-91d9b1d39cf1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid typeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f2786cd-6211-4437-b181-aa4e66c36500",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": [\"abc\"],\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 400 invalid timelineTemplateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93131e75-9807-49a5-b34f-538041fcceab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": [\"abc\"]\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 timelineTemplateId doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb397456-d073-445d-a841-cb6cb8b13de7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 typeId doesn't exist Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dcc0b4d-1d4b-4a28-951e-1c2c8c30b6f4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"a69033a4-4f18-4765-addc-f48cf61176d9\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e65f3f6-9a93-40e2-a3d6-3da06b4ffca8",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template by forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02968ec6-d796-45cd-aa3c-d0beb8676258",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cade3340-a4e0-4729-9a61-2291348d7032",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEB_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge type timeline template 409 conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0325ab08-1459-4457-b7d4-7f7519412bf5",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n    \"timelineTemplateId\": \"{{TEMPLATEA_ID}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2885b97a-fbf4-4016-be40-a0a159fb058d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37284158-22b3-4075-a467-d610eed37ced",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "delete challenge type timeline template",
					"item": [
						{
							"name": "delete challenge type timeline template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05456a1a-a4aa-4e97-8198-a2ab723f0bd6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e8e8d8c-14ae-41ae-b5a6-a078ef77c426",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d14e94e-d700-4ebf-9dd0-a2c61cd8123f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 401 expire token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e7d9c91-7af0-46d6-a17d-f313a4203fdc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ae08dfd-89e5-4e85-880b-fbf60bb2390b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 403 using user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e611bbb0-5e58-448c-9ebb-db81cbec3c5d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPE_TEMPLATEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPE_TEMPLATEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 400 invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4250878-b3b9-4f2d-8278-7f8ef1780e07",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure delete challenge type timeline template 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dde5f32a-bbcf-45cf-a6fc-62125aee91ae",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a23af88-b3c2-4024-ae07-63149c2fbd67",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64108481-8439-4e89-9643-34642656f36d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11ba895e-6db1-4154-8911-3b42066314a5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64da8cd3-7237-4dd0-af19-94e95813af3b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge",
					"item": [
						{
							"name": "create challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9544314a-f7eb-491c-8f09-839b3f60c314",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8381c86e-4d57-472e-9145-da4fbc5887cc",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"CHALLENGE_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"gitRepoURLs\": [\"https://github.com/topcoder-platform/community-app\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "552ea911-e27f-4aef-9fc6-b99a4c6afd95",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b1c89f8-70dd-411b-8eb3-1f58146b9d11",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\", \"fb7e4a66-03d3-4918-b328-b1f277b0590b\", \"fb7e4a66-03d3-4918-b328-b1f288b0590b\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - negative terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86eb4d76-7dcb-431a-8a78-56070dc75eab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [-20653, -20646]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge - invalid terms ids - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc700a4b-33ca-42ab-9e34-aea806e9d832",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"privateDescription\": \"private test description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"termsIds\": [\"Invalid20653\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eaa6f30-87a1-4a64-b1d6-99ab3e89d61d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": {\"tag1\": \"tag2\"},\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7be3a78-35b6-4b5e-a7b3-4ca0607602a9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using invactive time template 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7c082bf-f0f0-4edb-ac42-5bfe8c32bba7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEB_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizeSets 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da2ecd6f-b28d-45bb-995c-affdb951dd54",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty prizes array 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b758017-1044-4669-90fe-fadf4161f3d0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": []\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c92ef47d-5b4d-4bff-b82a-b8769f4804a0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": 12345,\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using empty phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b77fee5-9101-418d-9e54-d68ab69b9cb8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a4ccda4-7220-4b2e-a791-cfc774b223e2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid phases 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e9c1935-a054-4c01-a136-9641df4e4018",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"id\": \"{{PHASEA_ID}}\",\n        \t\"name\": \"inconsistent\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"id\": \"{{PHASED_ID}}\",\n        \t\"name\": \"phase-4\",\n    \t\t\"isActive\": false,\n\t    \t\"duration\": 2000000\n        },\n        {\n        \t\"id\": \"{{TYPEA_ID}}\",\n        \t\"name\": \"not-found\",\n        \t\"isActive\": true,\n        \t\"duration\": 1000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Code\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge invalid prizeSet type 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aefa2f68-a937-471f-ae97-b1ea5917a96d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"invalid\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "faiclure reate challenge invalid prize type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8afd348f-f308-4cc0-9283-5aa467d7a8c6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": 1234321,\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\",\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "655b18be-c88c-4f03-85fa-3c1fb2f1c96c",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3de5e232-7d0b-4be9-981b-5b1ac2a5f1cb",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a1502cb-683f-491b-842e-60f18297e2c1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeeaea7d-e94c-4fd3-953e-1a8369e2f3e7",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2df485c9-78b1-44c2-8b73-c96f8178f426",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8be3f03-5aca-45a8-8e7e-3e06fc4e9666",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"TEST_CHALLENGE_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_create}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-m2m\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c026ef-3524-4b3d-86c7-eed5faff1f44",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 10000,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure create challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09b92441-13e9-425b-b6af-060435bae157",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create-copilot\",\n\t\"description\": \"test-description\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value3\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sampleMetadata2\",\n\t\t\t\"value\": \"value4\"\n\t\t}\n\t],\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 200,\n\t\"status\": \"Draft\",\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"startDate\": \"2019-06-22T16:28:39.882Z\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "upload attachment",
					"item": [
						{
							"name": "upload attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867b5934-c344-4da5-8bf9-bf57ae355249",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc94576b-04ef-47b3-8a7c-eb9bdbb7b4a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"ATTACHMENT_ID2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by normal user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29db1171-12eb-4846-b33f-c1c7c0c96fe2",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bbc0fb-0cba-4db4-a72e-32c1176b88aa",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment by copilot not of challenge resource 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b45c4f4-0eaa-421b-9665-3e91898587ee",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment missing token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02c6f222-5bb6-4e91-9043-35414ee0482e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9187f52-695f-45a8-b346-fa2b22de218d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83d6667-c98c-424c-aae2-0e007634e194",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{expire_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment wrong file name 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29dbbe88-6845-40b6-a5d0-3e23ac8e7cd0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "wrong",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "upload attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e2a4361-1dc0-4601-90a5-82c95d89e2e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"TEST_ATTACHMENT_M2M_ID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_create}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure upload attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa752ddb-48de-4fda-b336-cf143a898048",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "download attachment",
					"item": [
						{
							"name": "download attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d756c36-a5e8-4cad-b3b9-7a96e87a44e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3804c085-1c96-47fd-8feb-cbb9fbe4bd29",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by challenge registrant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbfa9ce9-519a-4ca6-ab72-d08b17ede525",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment challenge id mismatch 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74734030-3785-4e6d-b0ab-cfc622a9eec6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment invalid attachment id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec4728cd-313d-4616-8933-8f4b0bf23fdb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "732bbc64-68b7-4a14-8529-0e5ba943988d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cac5e8d7-b1ea-4de1-8e52-b02a0bfee0b4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{ATTACHMENT_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{ATTACHMENT_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by none challenge registrant 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4e2f76f-8d56-4d74-8ad8-8e06c766e352",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment by anonymous user 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d2a4648-c4e7-4f1a-b944-a2eb0c888d92",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}/attachments/{{ATTACHMENT_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}",
										"attachments",
										"{{ATTACHMENT_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment using m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d96e05b9-78b0-4a4b-b743-5d9e0b2577a9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment using forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e63df021-c6f1-434c-9763-bdb4347b352a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}/attachments/{{TEST_ATTACHMENT_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}",
										"attachments",
										"{{TEST_ATTACHMENT_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure download attachment missing attachment id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7c6ca73-aa4a-4fb0-b2f4-f4c12f2471c7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}/attachments/{{SETTINGA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}",
										"attachments",
										"{{SETTINGA_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4da50c05-788c-46d9-bb78-1832285e97de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b94eeda7-a239-494d-b0f8-ee39b2f55541",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "update challenge",
					"item": [
						{
							"name": "update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fff08858-454b-4549-8d32-6950203a0891",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with attachment by M2M",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d6bb213-4ba5-4638-bb83-b172b4673994",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e363e4f5-1846-47e1-a957-5713dc63b13c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ee95e0e-841d-462b-93d8-8c8ceb984360",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEB_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n    \"discussions\": [{\n        \"name\": \"name1\",\n        \"type\": \"challenge\",\n        \"provider\": \"provider1\",\n        \"url\": \"url1\",\n        \"options\": [{\"key1\":\"value1\"}, {\"key2\":\"value2\"}]\n    }],\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 4\n\t\t}\n\t],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "770a8cd5-e85e-49ce-946c-a4648cea838b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b126a8ac-7221-458b-b531-6430f2187903",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge terms does not exist - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05bf6516-6a18-4b20-9751-415dd46956ad",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a823ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c342f15-9cac-4d30-8ad8-6793f8d03bd2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"groups\": \"group1 group2\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge attachment not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90ac98d-c43d-41d3-a106-8ada5df41d70",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{TYPEA_ID}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fabd0b5-9d30-40f9-be6e-103cb07750ae",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": 123,\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID1}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb73a548-c34f-46df-b8e9-dc3de4a3a896",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53022108-a84e-49d2-827a-1c120c94db61",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc2d4767-85e8-4ddf-8287-24b7d223a891",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1063105-aa8c-40f2-87c9-be7ad140419d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce56e080-33b6-412d-bc94-9329907c91d4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f8e6d1a-3a79-4bdf-b343-397421d8fc98",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name-1\",\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1facecda-238d-4a4e-ae7a-29d089e0f334",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_update}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8d959da-8c39-42fb-a811-6c810cc88f4e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-update-m2m\",\n\t\"description\": \"test-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge project not found 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "623bd71e-d2c4-4130-8ae0-afbb0afb1608",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 10000,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge user can't access the project 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04c72a67-02ae-4976-ac70-67ed2f365fdc",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"name\": \"update-name-1\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"description\": \"update-description-1\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n        {\n            \"phaseId\": \"{{PHASEA_ID}}\",\n            \"duration\": 1000000\n        },\n        {\n            \"phaseId\": \"{{PHASEB_ID}}\",\n            \"duration\": 2000000\n        }\n    ],\n    \"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"description\": \"desc\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 500\n                },\n                {\n                    \"description\": \"desc-second\",\n                    \"type\": \"second place\",\n                    \"value\": 250\n                }\n            ]\n        }\n    ],\n\t\"tags\": [\"tag3\", \"tag4\"],\n\t\"projectId\": 200,\n\t\"status\": \"Active\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\"],\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update challenge 1 with winners by admin Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "626a1dba-2e43-4b58-a8ec-e1a0405be723",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "811c2aaa-3fd0-4758-9ff2-39c22ffd6037",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Active\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fafbf0f-115c-472c-8ac1-0b9f5f7b609f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8add442-44fa-4e24-9a69-44d95328405e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with winners array - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9998c533-2c62-4656-baec-f96ee558fcda",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\",\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure update challenge with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2ba75a-8c0a-4852-b94d-0f9f96ab3d6d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"test-create\",\n\t\"description\": \"test-description\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 600\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 300\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"winners\": [],\n\t\"tags\": [\"tag1\", \"tag3\", \"tag4\"],\n\t\"projectId\": 123,\n\t\"legacyId\": 112233,\n\t\"status\": \"Completed\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial update challenge",
					"item": [
						{
							"name": "partial update challenge 1 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fe8ae42-478b-4ab3-88cc-72ee7e6b739c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"legacyId\": 789789\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 terms by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59742398-fd31-4ba4-816e-1d10d750eb7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 1 with winners by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a453335-76bf-4ef8-a70a-8d8537b4d68d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t \"winners\": [\n        {\n            \"userId\": 12345678,\n            \"handle\": \"thomaskranitsas\",\n            \"placement\": 1\n        },\n        {\n            \"userId\": 3456789,\n            \"handle\": \"tonyy\",\n            \"placement\": 2\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c21569a-8ffc-43a3-9412-7eb0558ea108",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update to endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fed0ce0-3c57-43dd-91ff-a5d53d66874a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 2000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 10000\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - remove default terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7104cbde-4853-4fc8-9065-f649ed06480e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"13bbb3cb-6779-4dc8-9787-26411dfb7925\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add non-existing terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ee21be-c5b7-47a9-ac8d-7588bdbfdf92",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"28841de8-2f42-486f-beac-21d46a732ab6\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - add duplicate terms - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57fa4a46-2d4c-41b8-b19e-d3ac3171a530",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"terms\": [\"0fcb41d1-ec7c-44bb-8f3b-f017a61cd708\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\", \"28841de8-2f42-486f-beac-21d46a832ab6\", \"be0652ae-8b28-4e91-9b42-8ad00b31e9cb\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge duplicate groups 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b57f9e51-9206-4319-a043-d4c300929fd4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n    \"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [\"g1\", \"g1\"],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge null group 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d813e23-d5c9-4181-a5b2-337fbf242907",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 5000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 6000000\n        }\n\t],\n\t\"tags\": [\"tag1\"],\n\t\"status\": \"Completed\",\n\t\"groups\": [null],\n\t\"attachmentIds\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by different copilot 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6cd55e7-e4b3-44f2-9e97-52be1223769e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbea3cdc-0fcb-4e09-9887-2029c55b7386",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4198e187-04ac-4dd1-ae02-5e020a4e6ca7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"{{TEST_TYPE_ID4}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"update-name\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b11d507-f898-494c-9fcb-0377ef3c0e86",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98eee767-1a9a-47bc-918c-cc3e8f0c402c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8b157b3-e7a8-42b2-952a-c27b0753b9ac",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge with expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a13870b9-309c-4b90-8de7-e22e468d895b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e1e487a-0726-4ad7-a56e-42458ebbd9b9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"{{TYPEA_ID}}\",\n\t\"legacy\": {\n\t\t\"track\": \"test-track\",\n\t\t\"reviewType\": \"review type\",\n\t\t\"forumId\": 456,\n\t\t\"confidentialityType\": \"public\"\n\t},\n\t\"name\": \"new-update-m2m\",\n\t\"description\": \"patch-update-m2m\",\n\t\"timelineTemplateId\": \"{{TEMPLATEA_ID}}\",\n\t\"phases\": [\n\t\t{\n        \t\"phaseId\": \"{{PHASEA_ID}}\",\n        \t\"duration\": 1000000\n        },\n        {\n        \t\"phaseId\": \"{{PHASEB_ID}}\",\n\t    \t\"duration\": 2000000\n        }\n\t],\n\t\"prizeSets\": [\n\t\t{\n\t\t\t\"type\": \"Challenge prizes\",\n\t\t\t\"description\": \"desc\",\n\t\t\t\"prizes\": [\n\t\t        {\n\t\t          \"description\": \"desc-first\",\n\t\t          \"type\": \"first place\",\n\t\t          \"value\": 500\n\t\t        },\n\t\t        {\n\t\t          \"description\": \"desc-second\",\n\t\t          \"type\": \"second place\",\n\t\t          \"value\": 250\n\t\t        }\n\t\t    ]\n\t\t}\n\t],\n\t\"tags\": [\"tag1\", \"tag2\"],\n\t\"projectId\": 123,\n\t\"status\": \"Draft\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{TEST_CHALLENGE_M2M_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TEST_CHALLENGE_M2M_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge project not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34daab24-6037-492d-aeaf-fbc6fb32c817",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 1000\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge user can't access specific project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4967a347-f7af-40ab-a6c3-744afb5478d6",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"update-new-name-1\",\n\t\"metadata\": [\n\t\t{\n\t\t\t\"name\": \"sampleMetadata1\",\n\t\t\t\"value\": \"value5\"\n\t\t}\n\t],\n\t\"prizeSets\": [\n        {\n            \"type\": \"Challenge prizes\",\n            \"prizes\": [\n                {\n                    \"description\": \"desc-first\",\n                    \"type\": \"first place\",\n                    \"value\": 100\n                }\n            ]\n        }\n    ],\n\t\"status\": \"Completed\",\n\t\"attachmentIds\": [\"{{ATTACHMENT_ID2}}\"],\n\t\"groups\": [\"group1\", \"group2\", \"group3\", \"group4\"],\n\t\"projectId\": 200\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge  from active to completed status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03dae84d-29c7-4003-8988-bf9fff63dcb4",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"Active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - Duplicate member with placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3517eea4-a6a6-4e45-80a4-c4aa96fca651",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - same member with multiple placements",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "655a24be-8a08-4f63-9699-c4d97448115c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 2\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - multiple members with one placement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7e9ac4b-dddc-4cad-899c-8686402197b5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \t\"winners\": [\n\t\t{\n\t\t\t\"userId\": 12345678,\n\t\t\t\"handle\": \"thomaskranitsas\",\n\t\t\t\"placement\": 1\n\t\t},\n\t\t{\n\t\t\t\"userId\": 3456789,\n\t\t\t\"handle\": \"tonyj\",\n\t\t\t\"placement\": 1\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure partial update challenge - with empty winners array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "582033b5-4ef0-4162-91f7-35d8154abfa8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"winners\": []\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get challenge",
					"item": [
						{
							"name": "get challenge 1 by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23e061b2-1488-481a-8093-df467d49711d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "631f3a39-04a3-49d1-8a5d-05d16a1de940",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{copilot1_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48a964df-6d5f-41f7-a68f-529e7a5db32b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 by user without group access 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da00553f-1470-4769-99de-d3c103eb2f54",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1698007a-976c-46ca-bcfa-72e6e3704118",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/invalid-id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"invalid-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure get challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb96c11c-36eb-4d6d-95ac-2fcd18a5c0f5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{TYPEA_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{TYPEA_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge using m2m token with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c133509f-0abc-4a51-90d9-924538bdf5b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using m2m token without scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b776d306-a5d6-4a78-b476-e6bbc86e879d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge 2 using invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa820b7e-b6e8-4647-bb5c-b2d88d7efcae",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID2}}"
									]
								},
								"description": "it will be consided as anonymous user"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "search challenge",
					"item": [
						{
							"name": "search challenge by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "288dacb5-8077-4471-972a-4474dce1b72a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&id={{CHALLENGE_ID1}}&track=track&name=TEST&description=test&reviewType=review type&tag=tag3&projectId=123&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&updatedDateStart=2017-02-22T00:00:00Z&updatedDateEnd=2028-02-22T00:00:00Z&createdBy=Tonyj&updatedBy=Tonyj&memberId=40309246&confidentialityType=public",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "id",
											"value": "{{CHALLENGE_ID1}}"
										},
										{
											"key": "track",
											"value": "track"
										},
										{
											"key": "name",
											"value": "TEST"
										},
										{
											"key": "description",
											"value": "test"
										},
										{
											"key": "reviewType",
											"value": "review type"
										},
										{
											"key": "tag",
											"value": "tag3"
										},
										{
											"key": "projectId",
											"value": "123"
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "updatedDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "updatedDateEnd",
											"value": "2028-02-22T00:00:00Z"
										},
										{
											"key": "createdBy",
											"value": "Tonyj"
										},
										{
											"key": "updatedBy",
											"value": "Tonyj"
										},
										{
											"key": "memberId",
											"value": "40309246"
										},
										{
											"key": "confidentialityType",
											"value": "public"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdbee4c7-9345-4c21-a7e3-928c5af157c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=40309246",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "40309246"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by copilot using another memberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9733744f-128e-4764-be98-ba367568c2cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot1_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&memberId=151743",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										},
										{
											"key": "memberId",
											"value": "151743"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by normal user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4825244-d3a2-455d-908e-7b72da27a4cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by anonymous user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ebc288f-4700-4f58-bf77-a6281994e213",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=100",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z",
											"disabled": true
										},
										{
											"key": "perPage",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid date 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11fbd8c5-7fc7-4395-994b-3d02952b923a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=abc&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "abc"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "623bf0c1-5083-4f0d-8452-5223464ce04c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?invalid=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "invalid",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter typeId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "087c4d69-7bf2-45fc-b982-f20c5c824bab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?typeId=111",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "typeId",
											"value": "111"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "722bd9b2-62b6-4c13-974a-4022737590e8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?id=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "id",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter timelineTemplateId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c9c7f5f-1ca2-46c8-ab86-04214d399750",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?timelineTemplateId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter projectId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5714f371-4d0b-47e4-959d-b3aa636d1e65",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?projectId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "projectId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter forumId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "303b89e6-50a5-414a-943a-a68eb60dc3d1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?forumId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "forumId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter legacyId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e46d39f-923d-4ed2-a479-e2c5f2b3d50a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?legacyId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "legacyId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99ee9047-969c-4e2c-b19b-c12fc3084d31",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?status=status-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "status",
											"value": "status-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter gitRepoURL 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc7d24b4-d045-497d-a7bd-60d769995083",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?gitRepoURL=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "gitRepoURL",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter currentPhaseId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab8650b8-7a43-469c-af8c-5829d0f0839c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?currentPhaseId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "currentPhaseId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "failure search challenge invalid parameter memberId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50f5f549-b0c8-4592-b9bc-04b7d6a2c608",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?memberId=test-",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "memberId",
											"value": "test-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m with read scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b819bcd-b4cb-4a7b-afcf-5db078ae0b67",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenges_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2016-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2016-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge using m2m without read scope(same as anonymous user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4529bc7-95c2-4da0-a3c4-ad0d0dbeb21e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_challenge_attachments_read}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?perPage=10&createdDateStart=2017-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "createdBy",
											"value": "TonyJ",
											"disabled": true
										},
										{
											"key": "createdDateStart",
											"value": "2017-02-22T00:00:00Z"
										},
										{
											"key": "createdDateEnd",
											"value": "2022-03-22T00:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search startData & endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d4b90f4-0d5e-4d17-97bb-deefcc15894b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?page=1&perPage=10&startDateStart=2019-06-01T00:00:00Z&startDateEnd=2019-06-30T23:59:59Z&endDateStart=2361-01-01T00:00:00Z&endDateEnd=2361-12-31T23:59:59Z",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "startDateStart",
											"value": "2019-06-01T00:00:00Z"
										},
										{
											"key": "startDateEnd",
											"value": "2019-06-30T23:59:59Z"
										},
										{
											"key": "endDateStart",
											"value": "2361-01-01T00:00:00Z"
										},
										{
											"key": "endDateEnd",
											"value": "2361-12-31T23:59:59Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search by search param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819af1a8-8d5e-41b7-bd97-f0b4b9dfc7db",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?search={{SEARCH_TAG}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "search",
											"value": "{{SEARCH_TAG}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d0603f1-5ead-4bb3-8068-5c6e2ef1d39a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?name={{SEARCH_NAME}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "name",
											"value": "{{SEARCH_NAME}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search by description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c929c99-ab84-483d-8fe8-c0ce66671949",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/challenges?description={{SEARCH_DESCRIPTION}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "description",
											"value": "{{SEARCH_DESCRIPTION}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AuditLogs",
			"item": [
				{
					"name": "search 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c16552b9-595b-42ad-afe7-ab532db747d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d06068-7ef4-43ac-b9a4-ee2cfe6f0dd1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID2}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z&createdBy=ghostar",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID2}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "ghostar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search by user 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c9657d3-626e-4874-8dd7-239d0d39ef38",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with expired token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17de037a-30c1-4e70-b124-cef309814282",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{expire_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search without token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6abb086e-eeec-4705-ab1d-d2e5013f4ef2",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search with invalid token 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74920030-8e78-4824-a806-db9bfd140207",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&fieldName=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search invalid parameter 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9e61e72-60d1-43c4-9bcf-83ae0768b463",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&invalid=n&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2019-03-22T00:00:00Z&createdBy=tonyj",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "invalid",
									"value": "n"
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2019-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search using m2m token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de32bc7e-76e7-4a5f-93c4-9c46123e0053",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenge_audit_logs_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "failure search using forbidden m2m token 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3bffe4e-16f4-42ca-93e6-24fb254a1bc5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_challenges_read}}"
							}
						],
						"url": {
							"raw": "{{URL}}/challenge-audit-logs?challengeId={{CHALLENGE_ID1}}&createdDateStart=2019-02-22T00:00:00Z&createdDateEnd=2022-03-22T00:00:00Z",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenge-audit-logs"
							],
							"query": [
								{
									"key": "challengeId",
									"value": "{{CHALLENGE_ID1}}"
								},
								{
									"key": "fieldName",
									"value": "n",
									"disabled": true
								},
								{
									"key": "createdDateStart",
									"value": "2019-02-22T00:00:00Z"
								},
								{
									"key": "createdDateEnd",
									"value": "2022-03-22T00:00:00Z"
								},
								{
									"key": "createdBy",
									"value": "tonyj",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "get app health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf18277-b678-4804-b5a8-0f5000c0fc74",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/challenges/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenges",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "57cfb74d-68fd-42f7-b91f-61ccfdda2e41",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f1d8b87d-6984-4616-a432-4aebf771ec87",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Elasticsearch - Get challenge index data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9200/challenge/_search",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9200",
					"path": [
						"challenge",
						"_search"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "1312fd20-67c8-4e3b-a1a4-17216c74923e",
			"key": "SEARCH_TAG",
			"value": "node"
		},
		{
			"id": "6e30a3d5-f665-461d-8920-2553d94daf10",
			"key": "SEARCH_NAME",
			"value": "skill"
		},
		{
			"id": "c92467ac-7250-4e2b-b2ba-aa404611cbd9",
			"key": "SEARCH_DESCRIPTION",
			"value": "Topcoder"
		}
	],
	"protocolProfileBehavior": {}
}